{"version":3,"sources":["product-editor/product-editor.tsx","product-list-item/product-list-item.tsx","product-list/product-list.tsx","shopping-cart-item/shopping-cart-item.tsx","shopping-cart/shopping-cart.tsx","process-actions.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["ProductEditor","props","className","placeholder","rows","cols","onChange","event","preventDefault","onParse","target","value","ProductListItem","onClick","onAddProduct","id","title","price","ProductList","products","map","product","key","ShoppingCartItem","quantity","onDeleteProduct","ShoppingCart","reduce","accum","processActions","state","action","type","items","text","match","productData","item","index","split","trim","shoppingData","selectedProduct","filter","length","shoppingProduct","selectedShoppingProduct","App","useReducer","dispatch","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2488ff38.chunk.js","sourcesContent":["import React from 'react';\r\nimport './product-editor.scss'\r\n\r\ntype ProductEditorProps = {\r\n    onParse: (text: string) => void\r\n}\r\n\r\nexport default function ProductEditor(props: ProductEditorProps) {\r\n    function handleOnChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\r\n        event.preventDefault();\r\n        props.onParse(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"product-editor\">\r\n            <textarea\r\n                className='product-editor__textarea'\r\n                placeholder=\"Enter products in following format: 'value, cost'\"\r\n                rows={5} cols={40}\r\n                onChange={handleOnChange}\r\n            >\r\n            </textarea>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './product-list-item.scss';\r\n\r\ntype ProductListItemProps = {\r\n    id: number;\r\n    title: string;\r\n    price: number;\r\n    onAddProduct: (id: number) => void;\r\n}\r\n\r\nexport default function ProductListItem(props: ProductListItemProps) {\r\n\r\n    function handleAddProduct (event: React.MouseEvent<HTMLButtonElement>) {\r\n        props.onAddProduct(props.id);\r\n    }\r\n\r\n    return (\r\n        <button className='product-list-item' onClick={handleAddProduct}>\r\n            <span className='product-list-item__title'>{props.title}</span>\r\n            <span className='product-list-item__value'>{props.price}</span>\r\n        </button>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport ProductListItem from '../product-list-item/product-list-item';\r\nimport { ProductDatum} from '../types';\r\nimport './product-list.scss';\r\n\r\ntype ProductListProps = {\r\n    products: ProductDatum[];\r\n    onAddProduct : (id: number) => void;\r\n}\r\n\r\n\r\nexport default function ProductList(props:ProductListProps) {\r\n    return (\r\n        <div className=\"product-list\">\r\n            {props.products.map(product =>\r\n                <ProductListItem\r\n                    key={product.id}\r\n                    id={product.id}\r\n                    title={product.title}\r\n                    price={product.price}\r\n                    onAddProduct={props.onAddProduct}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './shopping-cart-item.scss';\r\n\r\ntype ShoppingCartItemProps = {\r\n    id: number;\r\n    title: string;\r\n    price: number;\r\n    quantity: number;\r\n    onDeleteProduct: (id: number) => void;\r\n}\r\n\r\nexport default function ShoppingCartItem(props: ShoppingCartItemProps) {\r\n\r\n    function handleDeleteProduct (event: React.MouseEvent<HTMLButtonElement>) {\r\n        props.onDeleteProduct(props.id);\r\n    }\r\n\r\n    return (\r\n        <div className='shopping-list-item'>\r\n            <span className='shopping-list-item__title'>{props.title}</span>\r\n            <span className='shopping-list-item__price'>{props.price}</span><br/>\r\n            <span className='shopping-list-item__quantity'>{props.quantity}</span><br/>\r\n            <span className='shopping-list-item__total'>{props.price * props.quantity}</span><br/>\r\n            <button className='shopping-cart__delete-item-button' onClick={handleDeleteProduct}>Delete</button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport ShoppingCartItem from '../shopping-cart-item/shopping-cart-item';\r\nimport { ShoppingDatum} from '../types';\r\nimport './shopping-cart.scss';\r\n\r\ntype ShoppingCartProps = {\r\n    products: ShoppingDatum[];\r\n    onDeleteProduct : (id: number) => void;\r\n}\r\n\r\nexport default function ShoppingCart(props:ShoppingCartProps) {\r\n\r\n    return (\r\n        <div className=\"shopping-cart\">\r\n            {props.products.map(product =>\r\n                <ShoppingCartItem\r\n                    key={product.id}\r\n                    id={product.id}\r\n                    title={product.title}\r\n                    price={product.price}\r\n                    quantity={product.quantity}\r\n                    onDeleteProduct={props.onDeleteProduct}\r\n                />\r\n            )}\r\n\r\n            <div>Total : {props.products.reduce( (accum, product) =>\r\n                accum + product.quantity * product.price, 0)\r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ProductDatum, ShoppingDatum, State } from './types';\r\n\r\ntype Action =\r\n    | { type: 'parse', text: string }\r\n    | { type: 'add', id: number }\r\n    | { type: 'delete', id: number};\r\n\r\n\r\nexport default function processActions(state: State, action: Action): State {\r\n    switch (action.type) {\r\n        case 'parse':\r\n            const text = action.text;\r\n            const regex = /[^,]+, ?[0-9]+/g;\r\n            const items = text.match(regex);\r\n\r\n            if (items) {\r\n                const productData = items.map((item, index) => {\r\n                    const [title, price] = item.split(',');\r\n                    return {\r\n                        id: index,\r\n                        title: title.trim(),\r\n                        price: +price\r\n                    }\r\n                });\r\n\r\n                return {\r\n                    ...state,\r\n                    productData, shoppingData: []\r\n                }\r\n            }\r\n\r\n            return state;\r\n\r\n\r\n\r\n        case 'add':\r\n            const selectedProduct = state.productData.filter(product =>\r\n                product.id === action.id\r\n            );\r\n\r\n            if (selectedProduct.length === 1) {\r\n                const shoppingProduct = state.shoppingData.filter(product =>\r\n                    product.id === selectedProduct[0].id\r\n                );\r\n\r\n                if (shoppingProduct.length === 1) {\r\n                    shoppingProduct[0].quantity++;\r\n\r\n                    return {\r\n                        ...state,\r\n                        shoppingData: [...state.shoppingData]\r\n                    }\r\n                } else {\r\n\r\n                    return {\r\n                        ...state,\r\n                        shoppingData: [...state.shoppingData, {...selectedProduct[0], quantity: 1} ]\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            return state;\r\n\r\n        case 'delete':\r\n            const selectedShoppingProduct = state.shoppingData.filter(product =>\r\n                product.id === action.id\r\n            );\r\n\r\n            if (selectedShoppingProduct.length === 1) {\r\n                selectedShoppingProduct[0].quantity--;\r\n\r\n                if (selectedShoppingProduct[0].quantity === 0) {\r\n                    const shoppingData = state.shoppingData.filter(product =>\r\n                        product.id !== selectedShoppingProduct[0].id\r\n                    )\r\n\r\n                    return {\r\n                        ...state,\r\n                        shoppingData: [...shoppingData]\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    shoppingData: [...state.shoppingData]\r\n                }\r\n            }\r\n\r\n            return state;\r\n    }\r\n}","import React, { useReducer } from 'react';\r\nimport ProductEditor from './product-editor/product-editor';\r\nimport ProductList from './product-list/product-list';\r\nimport ShoppingCart from './shopping-cart/shopping-cart';\r\nimport processActions from './process-actions';\r\n\r\nexport default function App() {\r\n    const [state, dispatch] = useReducer(processActions, {productData: [], shoppingData: []});\r\n\r\n\r\n    function handleOnParse(text: string) {\r\n        dispatch({type: 'parse', text});\r\n    }\r\n\r\n    function handleAddProduct(id: number) {\r\n        dispatch({type: 'add', id});\r\n    }\r\n\r\n    function handleDeleteProduct(id: number) {\r\n        dispatch({type: 'delete', id});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ProductEditor onParse={handleOnParse}/>\r\n            <ProductList products={state.productData} onAddProduct={handleAddProduct}/>\r\n            <ShoppingCart products={state.shoppingData} onDeleteProduct={handleDeleteProduct}/>\r\n        </>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}